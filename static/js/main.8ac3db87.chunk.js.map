{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","arr2","items","map","item","className","key","type","id","value","text","App","refresh","e","preventDefault","setState","state","currentItem","addItem","bind","handleInput","newItem","this","arr","target","Date","now","onSubmit","placeholder","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAsBiBA,MAnBjB,SAAmBC,GACf,IACMC,EADQD,EAAME,MACDC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACzC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,OAC7C,2BAAOH,KAAK,WAAWF,UAAU,eAKtC,OAAO,6BAEFJ,ICoDMU,E,kDAhEb,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IAkCRY,QAAS,SAACC,GACNA,EAAEC,iBACF,EAAKC,SAAS,CACVb,MAAM,MApCZ,EAAKc,MAAQ,CACXd,MAAM,GACNe,YAAY,CACVP,KAAK,GACLJ,IAAI,KAGR,EAAKY,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVH,E,oDAYVN,GACNA,EAAEC,iBACF,IAAMO,EAAUC,KAAKN,MAAMC,YAC3B,GAAmB,KAAhBI,EAAQX,KAAW,CACpB,IAAMa,EAAG,sBAAOD,KAAKN,MAAMd,OAAlB,CAAyBmB,IACpCC,KAAKP,SAAS,CACZb,MAAOqB,EACPN,YAAY,CACVP,KAAK,GACLJ,IAAI,S,kCAKEO,GACVS,KAAKP,SAAS,CACZE,YAAY,CACVP,KAAMG,EAAEW,OAAOf,MACfH,IAAKmB,KAAKC,W,+BAchB,OACE,yBAAKrB,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAamB,SAAUL,KAAKJ,SACnC,2BAAOX,KAAK,OAAOqB,YAAY,aAAanB,MAAQa,KAAKN,MAAMC,YAAYP,KAAMmB,SAAUP,KAAKF,cAChG,4BAAQb,KAAK,UAAb,QAGF,2BAAIe,KAAKN,MAAMd,MAAMQ,MAEnB,kBAAC,EAAD,CAAWR,MAAOoB,KAAKN,MAAMd,QAC7B,4BAAQK,KAAK,SAASC,GAAG,MAAMsB,QAASR,KAAKV,SAA7C,mB,GAxDQmB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ac3db87.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const arr2 = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" id={item.key} value={item.text} />\r\n         <input type=\"checkbox\" className=\"check\" />\r\n\r\n     </p>\r\n     \r\n    </div>})\r\n    return <div>\r\n        \r\n        {arr2}\r\n        \r\n    </div>;\r\n  }\r\n\r\n  export default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const arr = [...this.state.items, newItem];\n    this.setState({\n      items: arr,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  refresh =(e) =>{\n      e.preventDefault();\n      this.setState({\n          items:[]      \n      })\n\n  }\n  \n render(){\n  return (\n    <div className=\"App\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter task\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add</button>\n         \n        </form>\n        <p>{this.state.items.text}</p>\n        \n          <ListItems items={this.state.items}/>\n          <button type=\"submit\" id=\"clr\" onClick={this.refresh}>Clear ALL</button>\n        \n      </header>\n    </div>\n  );\n }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}